nrow(df[which(df$Segment_Mean < -0.3), ])#Counts the number of hits rows with a `Segment_Mean` value less than -0.3
nrow(df[df$Segment_Mean >= -0.3 & df$Segment_Mean <= 0.3, ]) #Counts the number of hits rows with a `Segment_Mean` value less than -0.3
nrow(df[which(df$Segment_Mean > 0.3), ])
#Creating the GRange object corresponding to PIK3CA coordinates (based on hg19 assembly)
myGRange3 <- GRanges(seqnames = "3",
ranges = IRanges(start = 178866311, end = 178952497))
#Find any overlap between patient samples (`segs.gr`) and the PIK3CA region
hits3 <- findOverlaps(query = myGRange3, subject = segs.gr, type = "any")
#Extract the overlapping elements in `segs.gr` to PI3CA region
overlap.subset3 <- queryHits(hits3)
overlap.means2<-segs.gr[overlap.subset3]#Retrieve the complete hits information from `segs.gr`
df<-mcols(overlap.means2) #Create a dataframe with the complete hits information
nrow(df[df$Segment_Mean < -0.3, ])#Counts the number of hits rows with a `Segment_Mean` value less than -0.3
nrow(df[df$Segment_Mean >= -0.3 & df$Segment_Mean <= 0.3, ]) #Counts the number of hits rows with a `Segment_Mean` value less than -0.3
nrow(df[which(df$Segment_Mean > 0.3), ])
#Creating the GRange object corresponding to PIK3CA coordinates (based on hg19 assembly)
myGRange3 <- GRanges(seqnames = "3",
ranges = IRanges(start = 178866311, end = 178952497))
#Find any overlap between patient samples (`segs.gr`) and the PIK3CA region
hits3 <- findOverlaps(query = myGRange3, subject = segs.gr, type = "any")
#Extract the overlapping elements in `segs.gr` to PI3CA region
overlap.subset3 <- queryHits(hits3)
overlap.means2<-segs.gr[overlap.subset3]#Retrieve the complete hits information from `segs.gr`
df<-mcols(overlap.means2) #Create a dataframe with the complete hits information
nrow(df[df$Segment_Mean < -0.3, ])#Counts the number of hits rows with a `Segment_Mean` value less than -0.3
nrow(df[df$Segment_Mean >= -0.3 & df$Segment_Mean <= 0.3, ]) #Counts the number of hits rows with a `Segment_Mean` value less than -0.3
nrow(df[df$Segment_Mean > 0.3, ])
getwd
getwd()
setwd("C:/Users/tinit/Desktop/tfcb-homework08/data/raw")
# Build pre-requisites
#nstall.packages("plyr")
#install.packages("Amelia")
#BiocManager::install("impute")
library(plyr)
library(Amelia)
library(impute)
pcbilDataRaw <- read.csv(file = "pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" )
getwd()
# Build pre-requisites
#install.packages("plyr")
#BiocManager::install("impute")
library(plyr)
library(impute)
RawData <- read.csv(file = "pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" )
pcbilDataRaw <- read.csv(file = "pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" )
pcbilDataWork <- pcbilDataRaw
names(pcbilDataWork) <- tolower(names(pcbilDataWork))
names(pcbilDataWork)[39] <- "clin_diag"
pcbilDataWork$clin_diag <- as.factor(pcbilDataWork$clin_diag)
revalue(pcbilDataWork$clin_diag, c("Ampulla Ac" = "Ampullary carcinoma")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Distal Bile Duct Ac" = "Distal bile duct cancer")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Gallbladder Ac" = "Gallbladder cancer")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Hepatocellular Cancer" = "Hepatocellular carcinoma")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Intrahepatic Cholangiocarcinoma" = "Intrahepatic cholangiocarcinoma")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Pancreas Ac" = "Ductal pancreatic adenocarcinoma")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Perihilary Ac" = "Perihilar cholangiocarcinoma")) -> pcbilDataWork$clin_diag
head(pcbilDataWork[1:5])
#Total number of tumor samples
dim(pcbilDataWork)[1]
#Total number of markers
dim(pcbilDataWork)[2]
#List of markers
names(pcbilDataWork)
pcbilDataWork[rownames(pcbilDataWork) == "Intrahepatic Cholangiocarcinoma|366" , "clin_diag"] <- "Gallbladder cancer"
table(pcbilDataWork$clin_diag)
propmiss <- function(dataframe) {
m <- sapply(dataframe, function(x) {
data.frame(
nmiss=sum(is.na(x)),
n=length(x),
propmiss=round(sum(is.na(x))/length(x),2)
)
})
d <- data.frame(t(m))
d <- sapply(d, unlist)
d <- as.data.frame(d)
d$variable <- row.names(d)
row.names(d) <- NULL
d <- cbind(d[ncol(d)],d[-ncol(d)])
return(d[order(d$propmiss), ])
}
reportmiss <- function(dataframe) {
propMiss <- propmiss(dataframe)
print(propMiss)
totalNumValues <- dim(dataframe)[1] * (dim(dataframe)[2] - 1)
totalMissingValues <- sum(propMiss$nmiss)
return ( (100 / totalNumValues) * totalMissingValues  )
}
pcbilDataWorkMissingValues <- reportmiss(pcbilDataWork)
#Total percentage of missing data in processed dataset (%):
round(pcbilDataWorkMissingValues, 0)
reportmissperrow <- function(dataframe) {
pads <- c()
numMissingValues <- c()
propMissingValues <- c()
aRow <- 1
while(aRow <= nrow(dataframe)) {
pads <- c(pads, row.names(dataframe)[aRow])
numMissing <- sum(is.na(dataframe[aRow,]))
propMissingValues <- c(propMissingValues, round((100 / (dim(dataframe)[2] -1)) *numMissing,2))
numMissingValues <- c(numMissingValues, numMissing)
aRow <- aRow + 1
}
missingD <- data.frame(pad = pads, nmissing = numMissingValues, propmissing = propMissingValues, stringsAsFactors=F)
missingD$propmiss_interv <- cut(missingD$propmissing, c(0,10,20,30,40,50,60,70,80,90,100))
print(table(missingD$propmiss_interv))
return (subset(missingD, propmissing > 50)[, 1])
}
numCasesMissGreat50 <- reportmissperrow(pcbilDataWork)
#Number of cases in work dataset with more than 50% missing data:
length(numCasesMissGreat50)
missmap(pcbilDataWork, main = "Missingness map pcbilDataWork")
pcbilDataMarkerTrimmed <- subset(pcbilDataWork, select=-c(ttf1, cd146, cd146_nucl, ngfr_str, calretinin, glypican_3, ezh2, synap, hbme1, mesothelin, hepatocyte))
pcbilDataMarkerTrimmedMissingValues <- reportmiss(pcbilDataMarkerTrimmed)
#Total percentage missing data in dataset after trimming of markers: (%)
round(pcbilDataMarkerTrimmedMissingValues, 0)
missmap(pcbilDataMarkerTrimmed)
samplesWithMissingGreater50 <- reportmissperrow(pcbilDataMarkerTrimmed)
#Number of cases in filtered dataset with more than 50% missing data:
length(samplesWithMissingGreater50)
print(samplesWithMissingGreater50)
pcbilDataMarkerSamplesTrimmed <- pcbilDataMarkerTrimmed[!rownames(pcbilDataMarkerTrimmed) %in% samplesWithMissingGreater50, ]
pcbilDataMarkerTrimmedMissingValues <- reportmiss(pcbilDataMarkerSamplesTrimmed)
# Total percentage missing data the marker and sample filtered dataset: (%)
round(pcbilDataMarkerTrimmedMissingValues, 0)
missmap(pcbilDataMarkerSamplesTrimmed, main = "Missingness map pcbilDataMarkerSamplesTrimmed")
reportmissperrow(pcbilDataMarkerSamplesTrimmed)
pcbilMatrixImputed <- impute.knn(as.matrix(pcbilDataMarkerSamplesTrimmed[1:27]))
pcbilDataImputed <- as.data.frame(pcbilMatrixImputed$data)
pcbilDataImputed$clin_diag <- pcbilDataMarkerSamplesTrimmed$clin_diag
pcbilDataImputedMissingValues <-reportmiss(pcbilDataImputed)
# Total percentage missing data in imputed dataset: %
round(pcbilDataImputedMissingValues, 0)
missmap(pcbilDataImputed, main = "Missingness map pcbilDataImputed")
reportmissperrow(pcbilDataMarkerSamplesTrimmed)
class(pcbilDataMarkerSamplesTrimmed)
missrows %>% filter(missingprop <0.5) %>%
#Reassigns back to 'missrowsbs'
{.} -> missrows
# Build pre-requisites
#install.packages("plyr")
#BiocManager::install("impute")
library(plyr)
library(impute)
RawData <- read.csv(file = "pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" )
names(ProcessData) <- tolower(names(ProcessData)) #Converts column names to lowercase
ProcessData <- RawData
names(ProcessData) <- tolower(names(ProcessData)) #Converts column names to lowercase
names(ProcessData)[39] <- "clinical_diagnosis" #Names column 39 as 'clinical diagnosis'
#converts each element in the 'clinical_diagnosis' column to factors
ProcessData$clinical_diagnosis <- as.factor(ProcessData$clinical_diagnosis)
#Rename the clinical diagnosis with the complete nomenclature
revalue(ProcessData$clinical_diagnosis, c("Ampulla Ac" = "Ampullary carcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Distal Bile Duct Ac" = "Distal bile duct cancer")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Gallbladder Ac" = "Gallbladder cancer")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Hepatocellular Cancer" = "Hepatocellular carcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Intrahepatic Cholangiocarcinoma" = "Intrahepatic cholangiocarcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Pancreas Ac" = "Ductal pancreatic adenocarcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Perihilary Ac" = "Perihilar cholangiocarcinoma")) -> ProcessData$clinical_diagnosis
#Fix one incorrect anatomical-based diagnosis (according to the authors data analysis)
ProcessData[rownames(ProcessData) == "Intrahepatic Cholangiocarcinoma|366" , "clinical_diagnosis"] <- "Gallbladder cancer"
#Lets observe the composition of the raw dataset by atanomical-based diagnosis
table(ProcessData$clinical_diagnosis)
#Calculate the proportion of missing values (NA) for each immunohistochemical marker. It takes a dataframe as an input, and returns a matrix containing the number of NA values, the length of the column and the proportion of NA entries
missingprop <- function(dataframe){
m <- sapply(dataframe, function(x){
data.frame(nmiss=sum(is.na(x)), n=length(x), missingprop=round(sum(is.na(x))/length(x),2))
})
return(m)
}
#Takes the matrix output from calling the 'missingprop' function, combines each of its columns into a data frame
na.probs<-as.data.frame(sapply(data.frame(t(missingprop(ProcessData))), unlist))
na.probs
library("dplyr")
na.probs %>% filter(missingprop <0.4) %>%
#Reassigns back to 'na.probs'
{.} -> na.probs
markers<-row.names(na.probs)
ProcessData %>% select(all_of(markers))%>%
{.} -> ProcessData
missvalperrow<-function(dataframe) {
m2 <- apply(dataframe, 1, function(x){
c(nmiss=sum(is.na(x)), n=length(x), missingprop=round(sum(is.na(x))/length(x),2))
})
return(m2)
}
na.rows.prob<-as.data.frame(sapply(data.frame(t(missvalperrow(ProcessData))), unlist))
missrows<- data.frame(ProcessData,na.rows.prob)
missrows %>% filter(missingprop <0.5) %>%
#Reassigns back to 'missrowsbs'
{.} -> missrows
MatrixImputed <- impute.knn(as.matrix((trimmedds)))
missrows %>% filter(missingprop <0.5) %>%
#Reassigns back to 'missrowsbs'
{.} -> missrows
class(missrows)
missrows %>% filter(missingprop <0.5) %>%
#Reassigns back to 'missrowsbs'
{.} -> missrows
trimmedds<-missrows[1:27]
class(trimmedds)
MatrixImputed <- impute.knn(as.matrix((trimmedds)))
missrows %>% filter(missingprop <0.5) %>%
#Reassigns back to 'missrowsbs'
{.} -> missrows
trimmedds<-missrows[1:27]
trimmedds<-trimmedds[!row.names(trimmedds), ]
View(pcbilDataMarkerSamplesTrimmed)
View(ProcessData)
View(missrows)
RawData <- read.csv(file = "pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" )
ProcessData <- RawData
names(ProcessData) <- tolower(names(ProcessData)) #Converts column names to lowercase
names(ProcessData)[39] <- "clinical_diagnosis" #Names column 39 as 'clinical diagnosis'
#converts each element in the 'clinical_diagnosis' column to factors
ProcessData$clinical_diagnosis <- as.factor(ProcessData$clinical_diagnosis)
#Rename the clinical diagnosis with the complete nomenclature
revalue(ProcessData$clinical_diagnosis, c("Ampulla Ac" = "Ampullary carcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Distal Bile Duct Ac" = "Distal bile duct cancer")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Gallbladder Ac" = "Gallbladder cancer")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Hepatocellular Cancer" = "Hepatocellular carcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Intrahepatic Cholangiocarcinoma" = "Intrahepatic cholangiocarcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Pancreas Ac" = "Ductal pancreatic adenocarcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Perihilary Ac" = "Perihilar cholangiocarcinoma")) -> ProcessData$clinical_diagnosis
#Fix one incorrect anatomical-based diagnosis (according to the authors data analysis)
ProcessData[rownames(ProcessData) == "Intrahepatic Cholangiocarcinoma|366" , "clinical_diagnosis"] <- "Gallbladder cancer"
#Lets observe the composition of the raw dataset by atanomical-based diagnosis
table(ProcessData$clinical_diagnosis)
#Calculate the proportion of missing values (NA) for each immunohistochemical marker. It takes a dataframe as an input, and returns a matrix containing the number of NA values, the length of the column and the proportion of NA entries
missingprop <- function(dataframe){
m <- sapply(dataframe, function(x){
data.frame(nmiss=sum(is.na(x)), n=length(x), missingprop=round(sum(is.na(x))/length(x),2))
})
return(m)
}
#Takes the matrix output from calling the 'missingprop' function, combines each of its columns into a data frame
na.probs<-as.data.frame(sapply(data.frame(t(missingprop(ProcessData))), unlist))
na.probs
library("dplyr")
na.probs %>% filter(missingprop <0.4) %>%
#Reassigns back to 'na.probs'
{.} -> na.probs
markers<-row.names(na.probs)
ProcessData %>% select(all_of(markers))%>%
{.} -> ProcessData
missvalperrow<-function(dataframe) {
m2 <- apply(dataframe, 1, function(x){
c(nmiss=sum(is.na(x)), n=length(x), missingprop=round(sum(is.na(x))/length(x),3))
})
return(m2)
}
na.rows.prob<-as.data.frame(sapply(data.frame(t(missvalperrow(ProcessData))), unlist))
missrows<- data.frame(ProcessData,na.rows.prob)
missrows %>% filter(missingprop <0.5) %>%
#Reassigns back to 'missrowsbs'
{.} -> missrows
trimmedds<-missrows[1:27]
trimmedds<-trimmedds[!row.names(trimmedds), ]
View(missrows)
missvalperrow<-function(dataframe) {
m2 <- apply(dataframe, 1, function(x){
c(nmiss=sum(is.na(x)), n=length(x), missingprop=round(sum(is.na(x))/length(x),3))
})
return(m2)
}
na.rows.prob<-as.data.frame(sapply(data.frame(t(missvalperrow(ProcessData))), unlist))
missrows<- data.frame(ProcessData,na.rows.prob, stringsAsFactors=F)
missrows %>% filter(missingprop <0.5) %>%
#Reassigns back to 'missrowsbs'
{.} -> missrows
trimmedds<-missrows[1:27]
trimmedds<-trimmedds[!row.names(trimmedds), ]
missrows %>% filter(missingprop <0.5) %>%
#Reassigns back to 'missrowsbs'
{.} -> missrows
trimmedds<-missrows[1:27]
MatrixImputed <- impute.knn(as.matrix((trimmedds)))
missrows %>% filter(missingprop <0.5) %>%
#Reassigns back to 'missrows'
{.} -> missrows
trimmedds<-missrows[1:26]
MatrixImputed <- impute.knn(as.matrix((trimmedds)))
DataImputed <- as.data.frame(MatrixImputed$data)
DataImputed$clinical_diagnosis <- trimmedds$clinical_diagnosis
library("dplyr")
na.probs %>% filter(missingprop <0.4) %>%
#Reassigns back to 'na.probs'
{.} -> na.probs
markers<-row.names(na.probs)
ProcessData %>% select(markers)%>%
{.} -> ProcessData
library("dplyr")
na.probs %>% filter(missingprop <0.4) %>%
#Reassigns back to 'na.probs'
{.} -> na.probs
markers<-row.names(na.probs)
ProcessData %>% select(all_of(markers))%>%
{.} -> ProcessData
View(na.rows.prob)
#"missvalperrow" fucntion takes a dataframe as an input, and returns a matrix containing the number of NA values per row, the length of the row and the proportion of NA entries per row
missvalperrow<-function(dataframe) {
m2 <- apply(dataframe, 1, function(x){
c(nmiss=sum(is.na(x)), n=length(x), missingprop=round(sum(is.na(x))/length(x),3))
})
return(m2)
}
#Takes the matrix output from calling the 'missingprop' function and transposes its rows and columns.
#Then it builds a data frame with each of the matrix's columns. Then it unlists each atomic component occurring in each columns (which are thus far lists).
#Finally, every column is coerced into 'na.probs' data frame
na.rows.prob<-as.data.frame(sapply(data.frame(missvalperrow(ProcessData)), unlist))
missrows<- data.frame(ProcessData,na.rows.prob, stringsAsFactors=F)
#"missvalperrow" fucntion takes a dataframe as an input, and returns a matrix containing the number of NA values per row, the length of the row and the proportion of NA entries per row
missvalperrow<-function(dataframe) {
m2 <- apply(dataframe, 1, function(x){
c(nmiss=sum(is.na(x)), n=length(x), missingprop=round(sum(is.na(x))/length(x),3))
})
return(m2)
}
#Takes the matrix output from calling the 'missingprop' function and transposes its rows and columns.
#Then it builds a data frame with each of the matrix's columns. Then it unlists each atomic component occurring in each columns (which are thus far lists).
#Finally, every column is coerced into 'na.probs' data frame
na.rows.prob<-as.data.frame(sapply(data.frame(t(missvalperrow(ProcessData))), unlist))
missrows<- data.frame(ProcessData,na.rows.prob, stringsAsFactors=F)
#"missvalperrow" fucntion takes a dataframe as an input, and returns a matrix containing the number of NA values per row, the length of the row and the proportion of NA entries per row
missvalperrow<-function(dataframe) {
m2 <- apply(dataframe, 1, function(x){
c(nmiss=sum(is.na(x)), n=length(x), missingprop=round(sum(is.na(x))/length(x),3))
})
return(m2)
}
#Takes the matrix output from calling the 'missvalperrow' function and transposes its rows and columns.
#Then it builds a data frame with each of the matrix's columns, and unlists each component occurring in each columns (which are thus far lists).
#Finally, every column is coerced into 'na.rows.prob' data frame
na.rows.prob<-as.data.frame(sapply(data.frame(t(missvalperrow(ProcessData))), unlist))
missrows<- data.frame(ProcessData,na.rows.prob)
missrows %>% filter(missingprop <0.5) %>%
#Reassigns back to 'missrows'
{.} -> missrows
trimmedds<-missrows[1:26]
MatrixImputed <- impute.knn(as.matrix((trimmedds)))
DataImputed <- as.data.frame(MatrixImputed$data)
DataImputed$clinical_diagnosis <- trimmedds$clinical_diagnosis
View(DataImputed)
View(pcbilMatrixImputed)
View(pcbilDataImputed)
View(DataImputed)
View(pcbilDataImputed)
View(DataImputed)
MatrixImputed <- impute.knn(as.matrix((trimmedds)))
DataImputed <- as.data.frame(MatrixImputed$data)
DataImputed$clinical_diagnosis <- trimmedds$clinical_diagnosis
MatrixImputed <- impute.knn(as.matrix((trimmedds)))
DataImputed <- as.data.frame(MatrixImputed$data)
DataImputed$clinical_diagnosis <- missrows$clinical_diagnosis
View(DataImputed)
write.csv(pcbilDataImputed, path= "../raw/imputed_data.csv")
write.csv(pcbilDataImputed, path= "/../raw/imputed_data.csv")
write.csv(DataImputed, path= "/../raw/imputed_data.csv")
cd(..)
setwd(..)
setwd("../")
write.csv(DataImputed, path= "data/dity/imputed_data.csv")
getwd()
setwd("../")
write.csv(DataImputed, path= "data/dity/imputed_data.csv")
RawData <- read.csv(file = "pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" )
ProcessData <- RawData
names(ProcessData) <- tolower(names(ProcessData)) #Converts column names to lowercase
names(ProcessData)[39] <- "clinical_diagnosis" #Names column 39 as 'clinical diagnosis'
#converts each element in the 'clinical_diagnosis' column to factors
ProcessData$clinical_diagnosis <- as.factor(ProcessData$clinical_diagnosis)
revalue(ProcessData$clinical_diagnosis, c("Ampulla Ac" = "Ampullary carcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Distal Bile Duct Ac" = "Distal bile duct cancer")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Gallbladder Ac" = "Gallbladder cancer")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Hepatocellular Cancer" = "Hepatocellular carcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Intrahepatic Cholangiocarcinoma" = "Intrahepatic cholangiocarcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Pancreas Ac" = "Ductal pancreatic adenocarcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Perihilary Ac" = "Perihilar cholangiocarcinoma")) -> ProcessData$clinical_diagnosis
#Fix one incorrect anatomical-based diagnosis (according to the authors data analysis)
ProcessData[rownames(ProcessData) == "Intrahepatic Cholangiocarcinoma|366" , "clinical_diagnosis"] <- "Gallbladder cancer"
#Lets observe the composition of the raw dataset by atanomical-based diagnosis
table(ProcessData$clinical_diagnosis)
#"missingprop" fucntion takes a dataframe as an input, and returns a matrix containing the number of NA values, the length of the column and the proportion of NA entries
missingprop <- function(dataframe){
m <- sapply(dataframe, function(x){
data.frame(nmiss=sum(is.na(x)), n=length(x), missingprop=round(sum(is.na(x))/length(x),2))
})
return(m)
}
#Takes the matrix output from calling the 'missingprop' function and transposes its rows and columns.
#Then it builds a data frame with each of the matrix's columns. Then it unlists each atomic component occurring in each columns (which are thus far lists).
#Finally, every column is coerced into 'na.probs' data frame
na.probs<-as.data.frame(sapply(data.frame(t(missingprop(ProcessData))), unlist))
na.probs
library("dplyr")
na.probs %>% filter(missingprop <0.4) %>%
#Reassigns back to 'na.probs'
{.} -> na.probs
markers<-row.names(na.probs)
ProcessData %>% select(all_of(markers))%>%
{.} -> ProcessData
#"missvalperrow" function takes a dataframe as an input, and returns a matrix containing the number of NA values per row, the length of the row and the proportion of NA entries per row
missvalperrow<-function(dataframe) {
m2 <- apply(dataframe, 1, function(x){
c(nmiss=sum(is.na(x)), n=length(x), missingprop=round(sum(is.na(x))/length(x),3))
})
return(m2)
}
#Takes the matrix output from calling the 'missvalperrow' function and transposes its rows and columns.
#Then it builds a data frame with each of the matrix's columns, and unlists each component occurring in each columns (which are thus far lists).
#Finally, every column is coerced into 'na.rows.prob' data frame
na.rows.prob<-as.data.frame(sapply(data.frame(t(missvalperrow(ProcessData))), unlist))
missrows<- data.frame(ProcessData,na.rows.prob)
missrows %>% filter(missingprop <0.5) %>%
#Reassigns back to 'missrows'
{.} -> missrows
trimmedds<-missrows[1:26]
MatrixImputed <- impute.knn(as.matrix((trimmedds)))
DataImputed <- as.data.frame(MatrixImputed$data)
DataImputed$clinical_diagnosis <- missrows$clinical_diagnosis
setwd("../")
write.csv(DataImputed, path= "data/dity/imputed_data.csv")
getwd()
setwd("..")
write.csv(DataImputed, path= "data/dity/imputed_data.csv")
getwd()
# Build pre-requisites
#install.packages("plyr")
#BiocManager::install("impute")
library(plyr)
library(impute)
myWorkDirectory <- "~/tfcb-homework08/data/"
rawDataFileName <- paste(myWorkDirectory, "raw/pcbil_raw.csv", sep="")
imputedDataFileName <- paste(myWorkDirectory, "tidy/imputed_data.csv", sep="")
RawData <- read.csv(file = rawDataFileName, row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" )
ProcessData <- RawData
names(ProcessData) <- tolower(names(ProcessData)) #Converts column names to lowercase
names(ProcessData)[39] <- "clinical_diagnosis" #Names column 39 as 'clinical diagnosis'
#converts each element in the 'clinical_diagnosis' column to factors
ProcessData$clinical_diagnosis <- as.factor(ProcessData$clinical_diagnosis)
revalue(ProcessData$clinical_diagnosis, c("Ampulla Ac" = "Ampullary carcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Distal Bile Duct Ac" = "Distal bile duct cancer")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Gallbladder Ac" = "Gallbladder cancer")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Hepatocellular Cancer" = "Hepatocellular carcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Intrahepatic Cholangiocarcinoma" = "Intrahepatic cholangiocarcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Pancreas Ac" = "Ductal pancreatic adenocarcinoma")) -> ProcessData$clinical_diagnosis
revalue(ProcessData$clinical_diagnosis, c("Perihilary Ac" = "Perihilar cholangiocarcinoma")) -> ProcessData$clinical_diagnosis
#Fix one incorrect anatomical-based diagnosis (according to the authors data analysis)
ProcessData[rownames(ProcessData) == "Intrahepatic Cholangiocarcinoma|366" , "clinical_diagnosis"] <- "Gallbladder cancer"
#Lets observe the composition of the raw dataset by atanomical-based diagnosis
table(ProcessData$clinical_diagnosis)
#"missingprop" fucntion takes a dataframe as an input, and returns a matrix containing the number of NA values, the length of the column and the proportion of NA entries
missingprop <- function(dataframe){
m <- sapply(dataframe, function(x){
data.frame(nmiss=sum(is.na(x)), n=length(x), missingprop=round(sum(is.na(x))/length(x),2))
})
return(m)
}
#Takes the matrix output from calling the 'missingprop' function and transposes its rows and columns.
#Then it builds a data frame with each of the matrix's columns. Then it unlists each atomic component occurring in each columns (which are thus far lists).
#Finally, every column is coerced into 'na.probs' data frame
na.probs<-as.data.frame(sapply(data.frame(t(missingprop(ProcessData))), unlist))
na.probs
library("dplyr")
na.probs %>% filter(missingprop <0.4) %>%
#Reassigns back to 'na.probs'
{.} -> na.probs
markers<-row.names(na.probs)
ProcessData %>% select(all_of(markers))%>%
{.} -> ProcessData
#"missvalperrow" function takes a dataframe as an input, and returns a matrix containing the number of NA values per row, the length of the row and the proportion of NA entries per row
missvalperrow<-function(dataframe) {
m2 <- apply(dataframe, 1, function(x){
c(nmiss=sum(is.na(x)), n=length(x), missingprop=round(sum(is.na(x))/length(x),3))
})
return(m2)
}
#Takes the matrix output from calling the 'missvalperrow' function and transposes its rows and columns.
#Then it builds a data frame with each of the matrix's columns, and unlists each component occurring in each columns (which are thus far lists).
#Finally, every column is coerced into 'na.rows.prob' data frame
na.rows.prob<-as.data.frame(sapply(data.frame(t(missvalperrow(ProcessData))), unlist))
missrows<- data.frame(ProcessData,na.rows.prob)
missrows %>% filter(missingprop <0.5) %>%
#Reassigns back to 'missrows'
{.} -> missrows
#For imputation of missing immunohistochemical markers, remove columns without immunohistochemical markers info or/and numeric data types
trimmedds<-missrows[1:26]
#Impute NA entries
MatrixImputed <- impute.knn(as.matrix((trimmedds)))
DataImputed <- as.data.frame(MatrixImputed$data)
#Add back the 'clinical_diagnosis' column that was removed previous to imputation
DataImputed$clinical_diagnosis <- missrows$clinical_diagnosis
write.csv(DataImputed, imputedDataFileName, row.names=F, na="")
#Impute NA entries
MatrixImputed <- impute.knn(as.matrix((trimmedds)))
DataImputed <- as.data.frame(MatrixImputed$data)
#Add back the 'clinical_diagnosis' column that was removed previous to imputation
DataImputed$clinical_diagnosis <- missrows$clinical_diagnosis
table(DataImputed$clinical_diagnosis)
colnames(DataImputed)
table(DataImputed$clinical_diagnosis)
View(DataImputed)
#Impute NA entries
MatrixImputed <- impute.knn(as.matrix((trimmedds)))
DataImputed <- as.data.frame(MatrixImputed$data)
#Add back the 'clinical_diagnosis' column that was removed previous to imputation
DataImputed$clinical_diagnosis <- missrows$clinical_diagnosis
DataImputed$ID<-row.names(DataImputed)
View(DataImputed)
write.csv(DataImputed, imputedDataFileName, row.names=F, na="")
write.csv(DataImputed, imputedDataFileName, row.names=F, na="")
